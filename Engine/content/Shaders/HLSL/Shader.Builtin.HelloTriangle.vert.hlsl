/*
 * Razix Engine GLSL Vertex Shader File
 * Default Vertex Shader that can be used for rendering basic geometry with vertex colors and use a texture as well
 */
//------------------------------------------------------------------------------
#include "../ShaderCommon/ShaderInclude.Builtin.ShaderLangCommon.h"
//------------------------------------------------------------------------------
// Vertex Input - Generated by VS
//------------------------------------------------------------------------------
struct VSOut
{
    float4 Position   : SV_POSITION;
    float4 Color      : COLOR;
    float2 UV         : TEXCOORD;
};
//------------------------------------------------------------------------------
VSOut VS_MAIN(uint VertexIndex : SV_VertexID)
{
    VSOut vso;

    // Screen Quad 
    //vso.UV = float2((VertexIndex << 1) & 2, VertexIndex & 2);
	//vso.Position = float4(vso.UV * 2.0f - 1.0f, 0.0f, 1.0f);

    // Define the triangle vertices in normalized device coordinates (NDC)
     float2 positions[3] = {
        float2(-0.5f, -0.5f),
        float2( 0.0f,  0.5f),
        float2( 0.5f, -0.5f)
    };

    // Define the colors for each vertex (RGB)
    float4 colors[3] = {
        float4(1.0f, 0.0f, 0.0f, 1.0f), // Red
        float4(0.0f, 1.0f, 0.0f, 1.0f), // Green
        float4(0.0f, 0.0f, 1.0f, 1.0f)  // Blue
    };

    vso.Position = float4(positions[VertexIndex], 0.0f, 1.0f);
    vso.Color = colors[VertexIndex];
    vso.UV = positions[VertexIndex] * 0.5f + 0.5f;

    return vso;
}
