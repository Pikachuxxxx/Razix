<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:l="clr-namespace:Sce.Atf.Wpf.Controls.PropertyEditing"
                    xmlns:c="clr-namespace:Sce.Atf.Wpf.Controls"
                    xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
                    xmlns:vc="clr-namespace:Sce.Atf.Wpf.ValueConverters">

    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Border Width="16" Height="16" Background="Transparent" Padding="5,5,5,5">
            <Path Name="ExpandPath" Fill="Transparent" Stroke="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" Data="M0,0L0,6L6,0z">
                <Path.RenderTransform>
                    <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
                </Path.RenderTransform>
            </Path>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
                <Setter TargetName="ExpandPath" Property="Fill" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="ExpandPath" Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}" BasedOn="{StaticResource {x:Type Expander}}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="{x:Static SystemColors.ControlBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0">
                            <StackPanel Orientation="Horizontal">
                            <ToggleButton Width="20" Template="{StaticResource ExpanderToggleButton}" 
                                IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" />
                            <ContentPresenter Grid.Column="1" Margin="4" RecognizesAccessKey="True" ContentSource="Header" />
                            </StackPanel>
                        </Border>
                        <Border Visibility="Collapsed" Grid.Row="1"  x:Name="ExpandSite" Background="Transparent">
                            <ContentPresenter  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
                            <!--<Setter Property="BorderThickness" TargetName="Border" Value="1,1,1,0" />-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <!--<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" />-->
                            <!--<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" />-->
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GroupStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <Expander Style="{StaticResource ExpanderStyle}">
                        <Expander.IsExpanded>
                            <Binding Path="Items[0].IsExpanded" Mode="TwoWay"/>
                        </Expander.IsExpanded>
                        <Expander.Header>
                            <Border BorderThickness="0" Padding="0" >
                                <TextBlock FontWeight="Bold" Text="{Binding Name}" />
                            </Border>
                        </Expander.Header>
                        <Expander.Content>
                            <ItemsPresenter />
                        </Expander.Content>
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="PropertyNameTemplate">
        <TextBlock Text="{Binding Descriptor.DisplayName}" VerticalAlignment="Top">
            <TextBlock.ToolTip>
                <ToolTip Content="{Binding Descriptor.Description}">
                    <ToolTip.Style>
                        <Style TargetType="ToolTip">
                                <Style.Triggers>
                                <DataTrigger Binding="{Binding Descriptor.Description}" Value="">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ToolTip.Style>
                </ToolTip>
            </TextBlock.ToolTip>
        </TextBlock>
    </DataTemplate>

    <Style x:Key="ListBoxItemStyle"  TargetType="ListBoxItem">
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="BorderBrush" Value="{x:Static SystemColors.ControlBrush}"/>
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border BorderThickness="{TemplateBinding Border.BorderThickness}" Padding="{TemplateBinding Control.Padding}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" Name="Bd" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="20" />
                                <ColumnDefinition Width="{Binding LabelWidth, RelativeSource={RelativeSource AncestorType=l:PropertyGrid}, Mode=TwoWay, Converter={vc:DoubleToGridLengthConverter}}" />
                                <ColumnDefinition Width="7"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="1" Name="labelBd" BorderThickness="0" Padding="0,0,2,0">
                                <ContentPresenter Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{StaticResource PropertyNameTemplate}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="Top" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </Border>
                            <GridSplitter Grid.Column="2" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" BorderThickness="3,0,3,0" BorderBrush="Transparent"/>
                            <ContentPresenter Grid.Column="3" Content="{TemplateBinding ContentControl.Content}" 
                                              ContentTemplateSelector="{Binding EditorTemplateSelector, RelativeSource={RelativeSource AncestorType=l:PropertyGrid}}"
                                              ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" 
                                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" 
                                              Margin="4,0,2,0"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Selector.IsSelected" Value="True">
                            <Setter TargetName="labelBd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="labelBd" Property="TextElement.Foreground">
                                <Setter.Value>
                                    <DynamicResource ResourceKey="{x:Static SystemColors.HighlightTextBrushKey}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True"/>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="labelBd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter TargetName="labelBd" Property="TextElement.Foreground">
                                <Setter.Value>
                                    <DynamicResource ResourceKey="{x:Static SystemColors.ControlTextBrushKey}" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground">
                                <Setter.Value>
                                    <DynamicResource ResourceKey="{x:Static SystemColors.GrayTextBrushKey}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListBoxStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox" >
                    <ScrollViewer Padding="{TemplateBinding Control.Padding}" Focusable="False">
                        <Border BorderThickness="0"  Background="{TemplateBinding Panel.Background}" Name="Bd" SnapsToDevicePixels="True">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type l:PropertyGrid}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ListBoxItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ListBoxItemContainerStyle" Value="{StaticResource ListBoxItemStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type l:PropertyGrid}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="3"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <ContentPresenter Content="{TemplateBinding HeaderProperty}" Visibility="{Binding HeaderProperty, Converter={vc:ItemNullToVisibilityConverter}}"
                                              ContentTemplateSelector="{Binding EditorTemplateSelector, RelativeSource={RelativeSource AncestorType=l:PropertyGrid}}"/>

                            <l:PropertyGridToolBar Grid.Row="1" Properties="{TemplateBinding Properties}" Style="{TemplateBinding ToolBarStyle}"/>
                        
                            <ListBox x:Name="PART_Selector" 
                                Grid.Row="2"
                                Style="{StaticResource ListBoxStyle}"
                                VirtualizingStackPanel.IsVirtualizing="False"
                                ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                ScrollViewer.CanContentScroll="false"
                                HorizontalContentAlignment="Stretch"
                                IsSynchronizedWithCurrentItem="True" 
                                ItemContainerStyle="{TemplateBinding ListBoxItemContainerStyle}"
                                ItemsSource="{TemplateBinding Properties}"
                                Padding="{TemplateBinding Padding}"
                                ItemsPanel="{TemplateBinding ListBoxItemsPanel}">
                                <ListBox.GroupStyle>
                                    <GroupStyle ContainerStyle="{StaticResource GroupStyle}"/>
                                </ListBox.GroupStyle>
                            </ListBox>

                            <GridSplitter Grid.Row="3" HorizontalAlignment="Stretch" Height="3" 
                                          Background="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                                          Visibility="{TemplateBinding PropertyDetailsVisibility}"/>

                            <StackPanel Grid.Row="4"
                                        Visibility="{TemplateBinding PropertyDetailsVisibility}"
                                        DataContext="{Binding SelectedProperty, RelativeSource={RelativeSource AncestorType={x:Type l:PropertyGrid}}}">
                                <TextBlock Text="{Binding Descriptor.DisplayName}" FontWeight="Bold" Margin="4"/>
                                <TextBlock Text="{Binding Descriptor.Description}" TextWrapping="WrapWithOverflow" Margin="4,0,4,4"/>
                            </StackPanel>

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Data Templates**************************************************************-->
    <!--****************************************************************************-->

    <DataTemplate x:Key="InactiveEditorTemplate">
        <TextBlock Text="{Binding Value, Converter={vc:DisplayStringConverter}}" VerticalAlignment="Stretch"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static l:PropertyGrid.DefaultTextEditorTemplateKey}">
        <ContentControl Content="{Binding}" HorizontalContentAlignment="Stretch">
            <ContentControl.Style>
                <Style TargetType="ContentControl" >
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBox Text="{Binding Value, Mode=TwoWay}" BorderThickness="0" Padding="-2,0,0,0" VerticalAlignment="Stretch" VerticalContentAlignment="Center" Margin="0"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}" Value="False">
                            <Setter Property="ContentTemplate" Value="{StaticResource InactiveEditorTemplate}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ContentControl.Style>
        </ContentControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static l:PropertyGrid.ComboEditorTemplateKey}">
        <ContentControl Content="{Binding}" HorizontalContentAlignment="Stretch">
            <ContentControl.Style>
                <Style TargetType="ContentControl">
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ComboBox ItemsSource="{Binding StandardValues}" SelectedValue="{Binding Value}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Padding="4,0,4,0">
                                    <ComboBox.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Converter={vc:DisplayStringConverter}}" />
                                        </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                </ComboBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}" Value="False">
                            <Setter Property="ContentTemplate" Value="{StaticResource InactiveEditorTemplate}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ContentControl.Style>
        </ContentControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static l:PropertyGrid.StandardValuesEditorTemplateKey}">
        <ContentControl Content="{Binding}" HorizontalContentAlignment="Stretch">
            <ContentControl.Style>
                <Style TargetType="ContentControl">
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ComboBox ItemsSource="{Binding EditorContext.StandardValues}" 
                                          SelectedValue="{Binding Value}"
                                          IsEnabled="{Binding RelativeSource={RelativeSource Self}, Path=HasItems, Mode=OneWay}"
                                          HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Padding="4,0,4,0">
                                </ComboBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ContentControl.Style>
        </ContentControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static l:PropertyGrid.ReadOnlyTemplateKey}">
        <TextBlock Text="{Binding Value, Converter={vc:DisplayStringConverter}}" VerticalAlignment="Stretch" IsEnabled="False" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static l:PropertyGrid.BoolEditorTemplateKey}">
        <CheckBox IsChecked="{Binding Value, Mode=TwoWay}" VerticalAlignment="Center" IsEnabled="{Binding IsWriteable, Mode=OneTime}"/>
    </DataTemplate>
    
</ResourceDictionary>