diff --git a/Engine/src/Razix/Core/App/RZApplication.cpp b/Engine/src/Razix/Core/App/RZApplication.cpp
index a9f49999..b5d9669d 100644
--- a/Engine/src/Razix/Core/App/RZApplication.cpp
+++ b/Engine/src/Razix/Core/App/RZApplication.cpp
@@ -554,8 +554,6 @@ namespace Razix {
         // Load the scenes from the project file for the engine to load and present
         RAZIX_CORE_TRACE("Loading Scenes...");
         archive(cereal::make_nvp("Scenes", sceneFilePaths));
-        for (auto& sceneFilePath: sceneFilePaths)
-            RAZIX_CORE_TRACE("\t scene : {0}", sceneFilePath);
     }
 
     // Save mechanism for the RZApplication class
diff --git a/Engine/src/Razix/Core/Memory/RZMemoryBudgets.cpp b/Engine/src/Razix/Core/Memory/RZMemoryBudgets.cpp
index 47c3b092..02ab78c7 100644
--- a/Engine/src/Razix/Core/Memory/RZMemoryBudgets.cpp
+++ b/Engine/src/Razix/Core/Memory/RZMemoryBudgets.cpp
@@ -33,8 +33,10 @@ namespace Razix {
 
                     BudgetInfo budget                  = {};
                     bool       frameBudgetParseSuccess = budgetFileIniParser.getValue<float>("Departments", frameBudgetKey, budget.CPUframeBudget);
+                    (void) frameBudgetParseSuccess;
                     RAZIX_CORE_ASSERT(frameBudgetParseSuccess, "[Memory] failed to parse frame budget for {0}, make sure it's a float in .ini file and the value exists.", frameBudgetKey);
                     bool memoryBudgetParseSuccess = budgetFileIniParser.getValue<int>("Departments", memoryBudgetKey, budget.MemoryBudget);
+                    (void) memoryBudgetParseSuccess;
                     RAZIX_CORE_ASSERT(memoryBudgetParseSuccess, "[Memory] failed to parse memoroy budget for {0}, make sure it's a int in .ini file and the value exists.", memoryBudgetKey);
 
                     s_DepartmentBudgets[departInfo.first] = budget;
diff --git a/Engine/src/Razix/Core/Memory/RZMemoryFunctions.cpp b/Engine/src/Razix/Core/Memory/RZMemoryFunctions.cpp
index 566e5ea5..fec1ca13 100644
--- a/Engine/src/Razix/Core/Memory/RZMemoryFunctions.cpp
+++ b/Engine/src/Razix/Core/Memory/RZMemoryFunctions.cpp
@@ -25,7 +25,7 @@ namespace Razix {
 #ifdef RAZIX_MEMORY_DEBUG
             address = RZDebugMalloc(size, alignment, NULL, 0, NULL);
 #elif defined(RAZIX_PLATFORM_CONSOLE) || (RAZIX_PLATFORM_UNIX)
-            address = memalign(size, alignment);
+            address = malloc(RZMemAlign(size, alignment));
 #elif defined(_WIN32)
             address = _aligned_malloc(size, alignment);
 #endif
diff --git a/Engine/src/Razix/Core/RZEngine.cpp b/Engine/src/Razix/Core/RZEngine.cpp
index 8e7963c6..af2e51a1 100644
--- a/Engine/src/Razix/Core/RZEngine.cpp
+++ b/Engine/src/Razix/Core/RZEngine.cpp
@@ -79,6 +79,7 @@ namespace Razix {
         // TODO: Log the time take to initialize engine using Profiling macros
         auto                                   stop   = std::chrono::high_resolution_clock::now();
         std::chrono::duration<d32, std::milli> ms_d32 = (stop - start);
+        (void) ms_d32;
         RAZIX_CORE_INFO("Engine Ingnited in : {0} ms", ms_d32.count());
     }
 
diff --git a/Engine/src/Razix/Platform/API/Vulkan/VKShader.cpp b/Engine/src/Razix/Platform/API/Vulkan/VKShader.cpp
index b8fef2bf..5dfdda64 100644
--- a/Engine/src/Razix/Platform/API/Vulkan/VKShader.cpp
+++ b/Engine/src/Razix/Platform/API/Vulkan/VKShader.cpp
@@ -132,7 +132,7 @@ namespace Razix {
                 SpvReflectShaderModule module;
                 SpvReflectResult       result = spvReflectCreateShaderModule(fileSize, spvByteCode, &module);
                 RAZIX_CORE_ASSERT((result == SPV_REFLECT_RESULT_SUCCESS), "Could not reflect SPIRV shader - (%s)!", virtualPath);
-
+                (void) result;
                 delete spvByteCode;
 
                 // SPIRV-Reflect uses similar API to Vulkan, first enumerate for the count and then create the container and the use the same functions to fill the container with the enumerated data
diff --git a/Engine/src/Razix/Platform/GLFW/GLFWWindow.cpp b/Engine/src/Razix/Platform/GLFW/GLFWWindow.cpp
index 258f312c..42f729d0 100644
--- a/Engine/src/Razix/Platform/GLFW/GLFWWindow.cpp
+++ b/Engine/src/Razix/Platform/GLFW/GLFWWindow.cpp
@@ -127,6 +127,7 @@ namespace Razix {
         // TODO: Replace all this with WIN32 API
         if (!sGLFWInitialized) {
             int success = glfwInit();
+            (void) success;
             RAZIX_CORE_ASSERT(success, "Could not initialize GLFW");
 
             sGLFWInitialized = true;
diff --git a/Engine/src/Razix/Scene/Components/LuaScriptComponent.cpp b/Engine/src/Razix/Scene/Components/LuaScriptComponent.cpp
index 0f8ddd6d..db39aef6 100644
--- a/Engine/src/Razix/Scene/Components/LuaScriptComponent.cpp
+++ b/Engine/src/Razix/Scene/Components/LuaScriptComponent.cpp
@@ -28,6 +28,7 @@ namespace Razix {
         lua_rawgeti(L, LUA_REGISTRYINDEX, funcRegistryIndex);
         if (lua_pcall(L, 0, 0, 0) != 0) {
             auto errorStr = lua_tostring(L, -1);
+            (void) errorStr;
             RAZIX_CORE_ERROR("[Lua Script Manager] Error : {0}", errorStr);
             lua_pop(L, 1);    // Pop error message from stack
             return false;
@@ -73,6 +74,7 @@ namespace Razix {
 
         if (m_OnStartFunc > -1) {
             bool success = CallLuaFunction(m_OnStartFunc);
+            (void) success;
             RAZIX_CORE_ASSERT(success, "[Lua Script Manager] Error in OnStart: {0}", m_Filepath);
         }
     }
@@ -83,6 +85,7 @@ namespace Razix {
 
         if (m_UpdateFunc > -1) {
             bool success = CallLuaFunction(m_UpdateFunc);
+            (void) success;
             RAZIX_CORE_ASSERT(success, "[Lua Script Manager] Error in Update: {0}", m_Filepath);
         }
     }
@@ -93,7 +96,8 @@ namespace Razix {
 
         if (m_OnImGuiFunc > -1) {
             bool success = CallLuaFunction(m_OnImGuiFunc);
+            (void) success;
             RAZIX_CORE_ASSERT(success, "[Lua Script Manager] Error in OnImGui: {0}", m_Filepath);
         }
     }
-}    // namespace Razix
\ No newline at end of file
+}    // namespace Razix
diff --git a/Engine/src/Razix/Scripting/LuaBindings/LoggingLuaBindings.cpp b/Engine/src/Razix/Scripting/LuaBindings/LoggingLuaBindings.cpp
index 5e646209..1dbf8b2a 100644
--- a/Engine/src/Razix/Scripting/LuaBindings/LoggingLuaBindings.cpp
+++ b/Engine/src/Razix/Scripting/LuaBindings/LoggingLuaBindings.cpp
@@ -17,27 +17,31 @@ namespace Razix {
 
             LUA_REGISTER_GLOBAL_FUNCTION(L, "RZLog", Trace, {
                 const char* message = luaL_checkstring(L, 1);
+                (void) message;
                 RAZIX_TRACE(message);
                 return 0;
             });
 
             LUA_REGISTER_GLOBAL_FUNCTION(L, "RZLog", Info, {
                 const char* message = luaL_checkstring(L, 1);
+                (void) message;
                 RAZIX_INFO(message);
                 return 0;
             });
 
             LUA_REGISTER_GLOBAL_FUNCTION(L, "RZLog", Warn, {
                 const char* message = luaL_checkstring(L, 1);
+                (void) message;
                 RAZIX_WARN(message);
                 return 0;
             });
 
             LUA_REGISTER_GLOBAL_FUNCTION(L, "RZLog", Error, {
                 const char* message = luaL_checkstring(L, 1);
+                (void) message;
                 RAZIX_ERROR(message);
                 return 0;
             });
         }
     }    // namespace Scripting
-}    // namespace Razix
\ No newline at end of file
+}    // namespace Razix
diff --git a/Scripts/build_razix.py b/Scripts/build_razix.py
old mode 100644
new mode 100755
